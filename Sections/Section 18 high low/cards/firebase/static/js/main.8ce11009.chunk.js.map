{"version":3,"sources":["Card.jsx","Deck.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","styles","transform","this","props","rotateAngle","className","src","imgSrc","style","alt","imgAlt","Component","Deck","state","deckID","cardsRemaining","cards","currentGuess","undefined","gameOver","score","addCard","bind","localStorage","getItem","setItem","highScore","a","axios","get","result","data","deck_id","remaining","setState","prevProps","prevState","oldCard","length","code","slice","newCard","compareCards","posAngle","Math","random","e","alert","image","value","suit","target","attributes","name","newCards","key","uuid","getRotationAngle","card1","card2","cardStrength","indexOf","map","card","onClick","document","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8ce11009.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Card.css';\r\nclass Card extends Component {\r\n\r\n    render() {\r\n        const styles = { transform: `rotate(${this.props.rotateAngle}deg)` };\r\n\r\n        return (\r\n            <img className=\"card\" src={this.props.imgSrc} style={styles} alt={this.props.imgAlt} />\r\n        )\r\n    };\r\n};\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Card from './Card';\r\nimport './Deck.css'\r\nimport { v4 as uuid } from 'uuid';\r\nimport '@fortawesome/fontawesome-free/css/all.css'\r\n\r\nclass Deck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            deckID: '',\r\n            cardsRemaining: 0,\r\n            cards: [],\r\n            currentGuess: undefined,\r\n            gameOver: false,\r\n            score: 0\r\n        };\r\n        this.addCard = this.addCard.bind(this);\r\n        if (!localStorage.getItem('high-low-highScore')) {\r\n            localStorage.setItem('high-low-highScore', 0);\r\n        }\r\n        this.highScore = localStorage.getItem('high-low-highScore');\r\n\r\n    }\r\n    async componentDidMount() {\r\n        const result = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/');\r\n        const { deck_id: deckID, remaining: cardsRemaining } = result.data;\r\n        this.setState({ deckID, cardsRemaining });\r\n        this.addCard(false);\r\n    };\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.gameOver) { return; }\r\n        const { currentGuess } = this.state;\r\n        const oldCard = prevState.cards.length > 0 ? prevState.cards[prevState.cards.length - 1].code.slice(0, 1) : null;\r\n        const newCard = this.state.cards.length > 0 ? this.state.cards[this.state.cards.length - 1].code.slice(0, 1) : null;\r\n        if (!oldCard || !newCard) {\r\n            return;\r\n        }\r\n        if (currentGuess === 'high' && this.compareCards(oldCard, newCard) < 0) {\r\n            this.setState({ gameOver: true })\r\n        } else if (currentGuess === 'low' && this.compareCards(oldCard, newCard) > 0) {\r\n            this.setState({ gameOver: true })\r\n\r\n        } else {\r\n        }\r\n\r\n    }\r\n    getRotationAngle() {\r\n        const posAngle = Math.random() * 46;\r\n        return Math.random() < 0.5 ? posAngle : -posAngle;\r\n    }\r\n    async addCard(e) {\r\n        if (this.state.cardsRemaining === 0) {\r\n            alert('you ran out of cards!');\r\n            this.setState({ gameOver: true });\r\n            return;\r\n        }\r\n        const result = await axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/`);\r\n        const { image, value, suit, code } = result.data.cards[0];\r\n        const { remaining } = result.data;\r\n        const currentGuess = e ? e.target.attributes.name.value : false;\r\n        const newCards = [...this.state.cards, { code, key: uuid(), imgSrc: image, rotateAngle: this.getRotationAngle(), imgAlt: `${value} of ${suit}` }];\r\n        this.setState({ cards: newCards, cardsRemaining: remaining, currentGuess, score: this.state.score + 1 });\r\n    };\r\n\r\n    //returns 1 if card2 > card1\r\n    // 0 if card2 == card 1\r\n    // -1 if card1 > card2\r\n    compareCards(card1, card2) {\r\n        if (card1 === card2) { return 0; }\r\n        const cardStrength = ['2', '3', '4', '5', '6', '7', '8', '9', '0', 'J', 'Q', 'K', 'A'];\r\n        const indexCard1 = cardStrength.indexOf(card1);\r\n        const indexCard2 = cardStrength.indexOf(card2);\r\n        return indexCard1 > indexCard2 ? -1 : 1;\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.gameOver) {\r\n            if (this.state.score > this.highScore) {\r\n                alert('you set a new high score!');\r\n                this.highScore = this.state.score;\r\n                localStorage.setItem('high-low-highScore', this.state.score);\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"Deck\">\r\n                <h1>&#9826; High Low &#9826;</h1>\r\n                {this.state.gameOver ? <h1>You lose</h1> : null}\r\n                <span className=\"deck-score\"><div>Score: {this.state.score}</div> <div>High Score: {this.highScore}</div></span>\r\n                <div className=\"deck-cardsContainer\">\r\n                    {this.state.cards.map(card => {\r\n                        return (<Card key={card.key} code={card.code} imgSrc={card.imgSrc} rotateAngle={card.rotateAngle} imgAlt={card.imgAlt} />)\r\n                    })}\r\n                </div>\r\n                {!this.state.gameOver ? <div> <i className=\"fas fa-arrow-up\" name=\"high\" onClick={this.addCard}></i>\r\n                    <i className=\"fas fa-arrow-down\" name=\"low\" onClick={this.addCard}></i></div> : <button onClick={() => document.location.reload()}>New Game?</button>}\r\n\r\n\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Deck;","import './App.css';\nimport Deck from './Deck'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}